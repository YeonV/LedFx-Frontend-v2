Analyzing diff from abba0470aa8b4edd79822877514b8f0a2145235a to HEAD in src/store/...

--- POTENTIAL VALUE CHANGES DETECTED ---
-import { EffectConfig } from './storeVirtuals'
+import { EffectConfig } from '../../api/ledfx.types'
-export interface IDevice {
-  config: Record<string, any>
-  id: string
-  type: string
-  online?: boolean
-  virtuals?: string[]
-  active_virtuals?: string[]
-}
+// export interface IDevice {
+//   config: Record<string, any>
+//   id: string
+//   type: string
+//   online?: boolean
+//   virtuals?: string[]
+//   active_virtuals?: string[]
+// }
+  hosts?: string[]
-  setSystemConfig: async (config: any) =>
-    await Ledfx('/api/config', 'PUT', config),
+  setSystemConfig: async (config: any) => await Ledfx('/api/config', 'PUT', config),
-  importSystemConfig: async (config: any) =>
-    await Ledfx('/api/config', 'POST', config)
+  importSystemConfig: async (config: any) => await Ledfx('/api/config', 'POST', config)
-import type { IDevice } from './storeConfig'
+import { Device } from '../../api/ledfx.types'
-  devices: {} as Record<string, IDevice>,
+  devices: {} as Record<string, Device>,
-          state.devices = resp.devices as Record<string, IDevice>
+          state.devices = resp.devices as Record<string, Device>
-  addSpSongTrigger: async ({
-    scene_id,
-    song_id,
-    song_name,
-    song_position
-  }: any) => {
+  addSpSongTrigger: async ({ scene_id, song_id, song_name, song_position }: any) => {
-  editSpSongTrigger: async ({
-    scene_id,
-    song_id,
-    song_name,
-    song_position
-  }: any) => {
+  editSpSongTrigger: async ({ scene_id, song_id, song_name, song_position }: any) => {
-  activatePreset: async (
-    virtId: string,
-    category: string,
-    effectType: string,
-    presetId: string
-  ) =>
+  activatePreset: async (virtId: string, category: string, effectType: string, presetId: string) =>
-    const current =
-      sceneOrder.find((s: ISceneOrder) => s.sceneId === sceneId) || null
+    const current = sceneOrder.find((s: ISceneOrder) => s.sceneId === sceneId) || null
-    target =
-      sceneOrder.find((s: ISceneOrder) => s.order === current?.order - 1) ||
-      null
+    target = sceneOrder.find((s: ISceneOrder) => s.order === current?.order - 1) || null
-    const current =
-      sceneOrder.find((s: ISceneOrder) => s.sceneId === sceneId) || null
+    const current = sceneOrder.find((s: ISceneOrder) => s.sceneId === sceneId) || null
-    target =
-      sceneOrder.find((s: ISceneOrder) => s.order === current?.order + 1) ||
-      null
+    target = sceneOrder.find((s: ISceneOrder) => s.order === current?.order + 1) || null
+  clearMostUsedScenes: () => {
+    set(
+      produce((s: IStore) => {
+        s.mostUsedScenes = {}
+      }),
+      false,
+      'clearMostUsedScenes'
+    )
+  },
-  deleteScene: async (name: string) =>
-    await Ledfx('/api/scenes', 'DELETE', { data: { id: name } }),
+  deleteScene: async (name: string) => await Ledfx('/api/scenes', 'DELETE', { data: { id: name } }),
+import { Effect, EffectConfig, Virtual } from '../../api/ledfx.types'
-export type Segment = [
-  device: string,
-  start: number,
-  end: number,
-  reverse: boolean
-]
+export type Segment = [device: string, start: number, end: number, reverse: boolean]
-export interface EffectConfig {
-  background_brightness?: number
-  background_color?: string
-  beat_skip?: 'none' | 'odd' | 'even'
-  blur?: number
-  brightness?: number
-  color?: string
-  color_correction?: boolean
-  color_step?: number
-  decay?: number
-  ease_method?: string
-  flip?: boolean
-  frequency_range?: string
-  gradient?: string
-  gradient_name?: string
-  gradient_repeat?: number
-  gradient_roll?: number
-  invert_roll?: boolean
-  mirror?: boolean
-  mode?: string
-  multiplier?: number
-  skip_every?: number
-  solid_color?: boolean
-  advanced?: boolean
-  beat_frames?: string
-  flip_horizontal?: boolean
-  flip_vertical?: boolean
-  force_aspect?: boolean
-  force_fit?: boolean
-  gif_at?: string
-  ping_pong?: boolean
-  skip_frames?: string
-  strech_hor?: number
-  strech_ver?: number
-  diag?: boolean
-  diag2?: boolean
-  dump?: boolean
-  fake_beat?: boolean
-  rotate?: number
-  test?: string | boolean
-  speed_x?: number
-  size_x?: number
-  pulse_period?: number
-  pulse_ratio?: number
-  flash_color?: string
-  capture?: boolean
-  cpu_secs?: number
-  v_density?: number
-  twist?: number
-  radius?: number
-  density?: number
-  lower?: number
-  text?: string
-  speed_option_1?: number
-  text_color?: string
-  font?: string
-  mask?: string
-  foreground?: string
-  background?: string
-}
+// export interface EffectConfig {
+//   background_brightness?: number
+//   background_color?: string
+//   beat_skip?: 'none' | 'odd' | 'even'
+//   blur?: number
+//   brightness?: number
+//   color?: string
+//   color_correction?: boolean
+//   color_step?: number
+//   decay?: number
+//   ease_method?: string
+//   flip?: boolean
+//   frequency_range?: string
+//   gradient?: string
+//   gradient_name?: string
+//   gradient_repeat?: number
+//   gradient_roll?: number
+//   invert_roll?: boolean
+//   mirror?: boolean
+//   mode?: string
+//   multiplier?: number
+//   skip_every?: number
+//   solid_color?: boolean
+//   advanced?: boolean
+//   beat_frames?: string
+//   flip_horizontal?: boolean
+//   flip_vertical?: boolean
+//   force_aspect?: boolean
+//   force_fit?: boolean
+//   gif_at?: string
+//   ping_pong?: boolean
+//   skip_frames?: string
+//   strech_hor?: number
+//   strech_ver?: number
+//   diag?: boolean
+//   diag2?: boolean
+//   dump?: boolean
+//   fake_beat?: boolean
+//   rotate?: number
+//   test?: string | boolean
+//   speed_x?: number
+//   size_x?: number
+//   pulse_period?: number
+//   pulse_ratio?: number
+//   flash_color?: string
+//   capture?: boolean
+//   cpu_secs?: number
+//   v_density?: number
+//   twist?: number
+//   radius?: number
+//   density?: number
+//   lower?: number
+//   text?: string
+//   speed_option_1?: number
+//   text_color?: string
+//   font?: string
+//   mask?: string
+//   foreground?: string
+//   background?: string
+// }
-export interface Effect {
-  config: EffectConfig
-  name: string
-  type: string
-}
+// export interface Effect {
+//   config: EffectConfig
+//   name: string
+//   type: string
+// }
-export interface Virtual {
-  config: {
-    center_offset: number
-    frequency_max: number
-    frequency_min: number
-    icon_name: string
-    mapping: string
-    max_brightness: number
-    name: string
-    preview_only: boolean
-    rows: number
-    transition_mode: string
-    transition_time: number
-  }
-  id: string
-  is_device: string
-  auto_generated: boolean
-  segments: Segment[]
-  pixel_count: number
-  active: boolean
-  effect: Effect
-  effects: Effect[]
-  last_effect?: null | string
-  streaming?: boolean
-}
+// export interface Virtual {
+//   config: {
+//     center_offset: number
+//     frequency_max: number
+//     frequency_min: number
+//     icon_name: string
+//     mapping: string
+//     max_brightness: number
+//     name: string
+//     preview_only: boolean
+//     rows: number
+//     transition_mode: string
+//     transition_time: number
+//   }
+//   id: string
+//   is_device: string
+//   auto_generated: boolean
+//   segments: Segment[]
+//   pixel_count: number
+//   active: boolean
+//   effect: Effect
+//   effects: Effect[]
+//   last_effect?: null | string
+//   streaming?: boolean
+// }
-  addVirtual: async (config: any) =>
-    await Ledfx('/api/virtuals', 'POST', config),
+  addVirtual: async (config: any) => await Ledfx('/api/virtuals', 'POST', config),
-  deleteVirtual: async (virtId: string) =>
-    await Ledfx(`/api/virtuals/${virtId}`, 'DELETE'),
-  clearEffect: async (virtId: string) =>
-    await Ledfx(`/api/virtuals/${virtId}/effects`, 'DELETE'),
+  deleteVirtual: async (virtId: string) => await Ledfx(`/api/virtuals/${virtId}`, 'DELETE'),
+  clearEffect: async (virtId: string) => await Ledfx(`/api/virtuals/${virtId}/effects`, 'DELETE'),
-            type: (resp.effect as Effect).type,
-            name: (resp.effect as Effect).name,
-            config: (resp.effect as Effect).config
+            type: resp.effect.type,
+            name: resp.effect.name,
+            config: resp.effect.config
-          type: '',
+          type: null,
-          config: {}
+          config: null
-  oneShotAll: async (
-    color: string,
-    ramp: number,
-    hold: number,
-    fade: number
-  ) => {
-    const resp = await Ledfx('/api/virtuals_tools', 'PUT', {
+  oneShotAll: async (color: string, ramp: number, hold: number, fade: number) => {
+    const resp = await Ledfx('/api/virtuals_tools', 'POST', {
-  oneShot: async (
-    virtId: string,
-    color: string,
-    ramp: number,
-    hold: number,
-    fade: number
-  ) => {
+  oneShot: async (virtId: string, color: string, ramp: number, hold: number, fade: number) => {
-    pixelMode: true
+    pixelMode: true,
+    groupMode: true
-      | 'pixelMode',
+      | 'pixelMode'
+      | 'groupMode',
+  userClosedQrConnector: false,
+  setUserClosedQrConnector: (closed: boolean) =>
+    set(
+      produce((state: IStore) => {
+        state.userClosedQrConnector = closed
+      }),
+      false,
+      'api/dialog/QrScanner'
+    ),
+    qrConnector: {
+      open: false,
+      edit: false
+    },
-  setAssistant: (
-    kind: 'wled' | 'wledSegments' | 'openRgb' | 'launchpad',
-    val: boolean
-  ) =>
+  setAssistant: (kind: 'wled' | 'wledSegments' | 'openRgb' | 'launchpad', val: boolean) =>
+  setDialogOpenQrConnector: (open: boolean, edit?: boolean) =>
+    set(
+      produce((state: IStore) => {
+        state.dialogs.qrConnector = {
+          open,
+          edit: edit || false
+        }
+      }),
+      false,
+      'api/dialog/QrConnector'
+    ),
-    if (isBrowser)
-      window?.localStorage?.setItem(
-        'ledfx-host',
-        host.title ? host.title : host
-      )
+    console.log('setHost', host)
+    if (isBrowser) window?.localStorage?.setItem('ledfx-host', host.title ? host.title : host)
+import { produce } from 'immer'
+import type { IStore } from '../useStore'
+import { IMCell } from '../../pages/Devices/EditVirtuals/EditMatrix/M.utils'
+const storeMatrix = (set: any) => ({
+  isExternalEditorOpen: false,
+  virtualEditorIsDirty: false,
+  virtualEditorSnapshot: null as IMCell[][] | null,
+  externalStudioRef: null as Window | null,
+  setExternalEditorOpen: (isOpen: boolean) =>
+    set(
+      produce((state: IStore) => {
+        state.isExternalEditorOpen = isOpen
+      }),
+      false,
+      'setExternalEditorOpen'
+    ),
+  setVirtualEditorIsDirty: (isDirty: boolean) =>
+    set(
+      produce((state: IStore) => {
+        state.virtualEditorIsDirty = isDirty
+      }),
+      false,
+      'setVirtualEditorIsDirty'
+    ),
+  setVirtualEditorSnapshot: (snapshot: any) =>
+    set(
+      produce((state: IStore) => {
+        state.virtualEditorSnapshot = snapshot
+      }),
+      false,
+      'setVirtualEditorSnapshot'
+    ),
+  setExternalStudioRef: (win: Window | null) => set({ externalStudioRef: win })
+})
+export default storeMatrix
-      Object.keys(colors).find(
-        (key) => colors[key as keyof typeof colors] === numericValue
-      ) || undefined
+      Object.keys(colors).find((key) => colors[key as keyof typeof colors] === numericValue) ||
+      undefined
-    for (
-      let i = 0;
-      i < MidiDevices[state.midiType][state.midiModel].buttonNumbers.length;
-      i++
-    ) {
+    for (let i = 0; i < MidiDevices[state.midiType][state.midiModel].buttonNumbers.length; i++) {
-        j <
-        MidiDevices[state.midiType][state.midiModel].buttonNumbers[i].length;
+        j < MidiDevices[state.midiType][state.midiModel].buttonNumbers[i].length;
-        if (
-          MidiDevices[state.midiType][state.midiModel].buttonNumbers[i][j] ===
-          inputInt
-        ) {
+        if (MidiDevices[state.midiType][state.midiModel].buttonNumbers[i][j] === inputInt) {
-        if (
-          inputArray.length !== 9 ||
-          !inputArray.every((row) => row.length === 9)
-        ) {
+        if (inputArray.length !== 9 || !inputArray.every((row) => row.length === 9)) {
-        state.qlc.QLCActTriggers = state.qlc.QLCActTriggers.filter(
-          (f: any) => f.id !== id
-        )
+        state.qlc.QLCActTriggers = state.qlc.QLCActTriggers.filter((f: any) => f.id !== id)
-  spotifyEmbedUrl:
-    'https://open.spotify.com/embed/playlist/4sXMBGaUBF2EjPvrq2Z3US?',
+  spotifyEmbedUrl: 'https://open.spotify.com/embed/playlist/4sXMBGaUBF2EjPvrq2Z3US?',
-        state.spotify.spActTriggers = state.spotify.spActTriggers.filter(
-          (f: any) => f.id !== id
-        )
+        state.spotify.spActTriggers = state.spotify.spActTriggers.filter((f: any) => f.id !== id)
-            state.spotify.spTriggersList = state.spotify.spTriggersList.map(
-              (each: any) => (each.id === newTrigger.id ? newTrigger : each)
+            state.spotify.spTriggersList = state.spotify.spTriggersList.map((each: any) =>
+              each.id === newTrigger.id ? newTrigger : each
-          state.ui.bars.bottomBar = state.ui.bars.bottomBar.filter(
-            (p: any) => p !== page
-          )
+          state.ui.bars.bottomBar = state.ui.bars.bottomBar.filter((p: any) => p !== page)
+    ),
+  pendingMatrixLayout: null as any,
+  setPendingMatrixLayout: (layout: any): void =>
+    set(
+      produce((state: IStore) => {
+        state.ui.pendingMatrixLayout = layout
+      }),
+      false,
+      'ui/pendingMatrixLayout'
-  youtubeURL:
-    'https://www.youtube.com/watch?v=s6Yyb3N9IuA&list=PLD579BDF7F8D8BFE0',
+  youtubeURL: 'https://www.youtube.com/watch?v=s6Yyb3N9IuA&list=PLD579BDF7F8D8BFE0',
+import storeMatrix from './ui/storeMatrix'
+          ...storeMatrix(set),
-          log(
-            'infoConfig Migrator',
-            `Migrating from version ${version} to ${frontendConfig}`
-          )
+          log('infoConfig Migrator', `Migrating from version ${version} to ${frontendConfig}`)
-                  'pixelGraphs'
+                  'pixelGraphs',
+                  'externalStudioRef'

--- END OF REPORT ---
